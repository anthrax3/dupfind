./XmlUtils.java:951:Duplication 1 (1st instance, 626 characters, 41 lines).
./XmlUtils.java:1017:Duplication 1 (2nd instance).
./XmlUtils.java:1076:Duplication 1 (3rd instance).
                        throw new XmlPullParserException("Need value attribute in item");
                    } catch (NumberFormatException e) {
                        throw new XmlPullParserException("Not a number in value attribute in item");
                    }
                } else {
                    throw new XmlPullParserException("Expected item tag at: " + parser.getName());
                }
            } else if (eventType == parser.END_TAG) {
                if (parser.getName().equals(endTag)) {
                    return array;
                } else if (parser.getName().equals("item")) {
                    i++;
                } else {
                    throw new XmlPullParserException("Expected " + endTag + " end tag at: " + parser.getName());
                }
            }
            eventType = parser.next();
        } while (eventType != parser.END_DOCUMENT);

        throw new XmlPullParserException("Document ended before " + endTag + " end tag");
    }

    /**
     * Read a String[] object from an XmlPullParser.  The XML data could
     * previously have been generated by writeStringArrayXml().  The XmlPullParser
     * must be positioned <em>after</em> the tag that begins the list.
     *
     * @param parser The XmlPullParser from which to read the list data.
     * @param endTag Name of the tag that will end the list, usually "string-array".
     * @param name An array of one string, used to return the name attribute
     *             of the list's tag.
     *
     * @return Returns a newly generated String[].
     *
     * @see #readListXml
     */
    public static final

./XmlUtils.java:900:Duplication 2 (1st instance, 241 characters, 23 lines).
./XmlUtils.java:837:Duplication 2 (2nd instance).
./XmlUtils.java:779:Duplication 2 (3rd instance).
                throw new XmlPullParserException(
                        "Expected " + endTag + " end tag at: " + parser.getName());
            }
            eventType = parser.next();
        } while (eventType != parser.END_DOCUMENT);

        throw new XmlPullParserException(
                "Document ended before " + endTag + " end tag");
    }

    /**
     * Read an ArrayList object from an XmlPullParser.  The XML data could
     * previously have been generated by writeListXml().  The XmlPullParser
     * must be positioned <em>after</em> the tag that begins the list.
     *
     * @param parser The XmlPullParser from which to read the list data.
     * @param endTag Name of the tag that will end the list, usually "list".
     * @param name An array of one string, used to return the name attribute
     *             of the list's tag.
     *
     * @return HashMap The newly generated list.
     *
     * @see #readListXml
     */
    public static final

./XmlUtils.java:994:Duplication 3 (1st instance, 229 characters, 7 lines).
./XmlUtils.java:925:Duplication 3 (2nd instance).
                                                  String endTag, String[] name)
            throws XmlPullParserException, java.io.IOException {

        int num;
        try {
            num = Integer.parseInt(parser.getAttributeValue(null, "num"));
        } catch (NullPointerException e) {
            throw new XmlPullParserException(
                    "Need num attribute in 

./XmlUtils.java:1113:Duplication 4 (1st instance, 216 characters, 6 lines).
./XmlUtils.java:1054:Duplication 4 (2nd instance).
                                                        String[] name) throws XmlPullParserException, java.io.IOException {

        int num;
        try {
            num = Integer.parseInt(parser.getAttributeValue(null, "num"));
        } catch (NullPointerException e) {
            throw new XmlPullParserException("Need num attribute in 

./XmlUtils.java:453:Duplication 5 (1st instance, 188 characters, 8 lines).
./XmlUtils.java:414:Duplication 5 (2nd instance).
./XmlUtils.java:492:Duplication 5 (3rd instance).
        if (name != null) {
            out.attribute(null, "name", name);
        }

        final int n = val.length;
        out.attribute(null, "num", Integer.toString(n));

        for (int i=0; i<n; i++) {
            out.startTag(null, "item");
            out.attribute(null, "value",

